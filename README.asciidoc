:imagesdir: ./images
:toc: macro

= ROSRomeoNode

This is an Arduino proejct for a DFRobot Romeo that implements a ROS
Node using `rosserial_arduino` to publish encoder and sensor values
and subscribe to desired motor speeds.

toc::[]

== Node API

This node uses motor control commands to set the speeds of two motors. In
addition, it monitors encoders for the two motors and published their
counts and rates.

To prevent a ROS node crash or communication problem from causing a
runaway robot, the node will stop the robot if no new motor command
is received within a timeout threshold.

=== Published Topics

`~l_ticks` (Int16):: Left wheel traveled distance, in encoder ticks
`~r_ticks` (Int16):: Right wheel traveled distance, in encoder ticks
`~l_vel` (Float32):: Left wheel speed (ticks per second)
`~r_vel` (Float32):: Right wheel speed (ticks per second)
`~a0` (Int16):: Analog pin A0 value
`~a2` (Int16):: Analog pin A2 value
`~a3` (Int16):: Analog pin A3 value
`~a4` (Int16):: Analog pin A4 value
`~a5` (Int16):: Analog pin A5 value
`~a6` (Int16):: Analog pin A6 value
`~bat_v` (Float32):: Battery voltage (Volts)
`~btn_a` (Int16):: Switch A value (1==press, 0==release)
`~btn_b` (Int16):: Switch B value (1==press, 0==release)
`~btn_c` (Int16):: Switch C value (1==press, 0==release)

=== Subscribed Topics

`~l_vtarg` (Float32):: Left wheel target speed (ticks per second)
`~r_vtarg` (Float32):: Right wheel target speed (ticks per second)
`~led_g` (Int16):: Green LED desired state (1==on, 0==off)
`~led_r` (Int16):: Red LED desired state (1==on, 0==off)
`~led_y` (Int16):: Yellow LED desired state (1==on, 0==off)

=== Parameters

`~control_rate` (Int16, default 50):: The rate at which the motors are updated, in Hz.
`~vtarget_timeout` (Float32, default 0.5):: Maximum time, in seconds, from the
last velocity target command. If no command is received within this timeout, the
node assumes the controller node has crashed, and sets the motor speeds to
zero.
`~k_p` (Float32, default 0.1):: Proportional control parameter.
`~k_i` (Float32, default 0.0):: Integral control parameter.
`~k_d` (Float32, default 0.0):: Derivative control parameter.
